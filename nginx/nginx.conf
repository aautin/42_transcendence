###################################
#           NGINX FRONT           #
###################################

error_log  /dev/stderr debug;
worker_shutdown_timeout 1s;

events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Configuration CORS globale
    map $http_origin $cors_origin {
        default "";
        "~^https?://localhost(:[0-9]+)?$" "$http_origin";
        "~^https?://127.0.0.1(:[0-9]+)?$" "$http_origin";
		"~^https?://${LOCAL_IP}(:[0-9]+)?$" "$http_origin";
    }

    upstream backend {
        server backend:3000;
    }

    server {
        listen 443 ssl;
        server_name ${LOCAL_IP};

		ssl_certificate     /etc/nginx/certs/selfsigned.crt;
    	ssl_certificate_key /etc/nginx/certs/selfsigned.key;

        add_header Content-Security-Policy "
		default-src 'self' https://accounts.google.com;
		connect-src 'self' wss://${LOCAL_IP}:8443 https://${LOCAL_IP}:8443;
		script-src 'self' 'unsafe-inline' 'unsafe-eval' https://accounts.google.com https://cdn.babylonjs.com;
		style-src 'self' 'unsafe-inline' https://fonts.googleapis.com;
		font-src 'self' https://fonts.gstatic.com;
		img-src 'self' data: https:;
		frame-src https://accounts.google.com;" always;


        # Support des cookies SameSite=None
        proxy_cookie_path / "/; Secure; SameSite=None";
        
        # En-têtes de sécurité
        add_header Access-Control-Allow-Credentials 'true' always;
        add_header Access-Control-Allow-Origin $cors_origin always;
        add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS, PUT, DELETE' always;
        add_header Access-Control-Allow-Headers 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,Cookie' always;
        add_header Access-Control-Expose-Headers 'Content-Length,Content-Range,Set-Cookie' always;

        # Gérer les requêtes OPTIONS préliminaires
        if ($request_method = 'OPTIONS') {
            return 204;
        }

        # Route pour le frontend
        location / {
            root   /usr/share/nginx/html/src;  # Modification du chemin root
            index  index.html;
            try_files $uri $uri/ /index.html;

            # Don't set cache for script files during development 
            location ~* \.(js|css)$ {
                expires -1;
                add_header Cache-Control "no-cache, no-store, must-revalidate";
                add_header Pragma "no-cache";
                add_header Expires 0;
            }

            # Ajout des headers pour les fichiers statiques
            location ~* \.(png|jpg|jpeg|gif|ico)$ {
                expires 1d;
                add_header Cache-Control "public, no-transform";
            }
        }

        # Route pour l'API et WebSocket
        location /api/ {
            proxy_pass http://backend/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Conservation des cookies
            proxy_set_header Cookie $http_cookie;
            proxy_pass_header Set-Cookie;

            # Timeouts WebSocket
            proxy_read_timeout 300s;
            proxy_send_timeout 300s;
        }

		location /avatar/ {
    	alias /data/avatar/;
    	add_header Cache-Control "public, max-age=86400";
		}
    }
}

###################################
#      NGINX FRONT GREG DEBUG     #
###################################


# error_log  /dev/stderr debug;
# worker_shutdown_timeout 1s;

# events {
#     worker_connections 1024;
# }

# http {
#     include       /etc/nginx/mime.types;
#     default_type  application/octet-stream;

#     # Configuration CORS globale
#     map $http_origin $cors_origin {
#         default "";
#         "~^https?://localhost(:[0-9]+)?$" "$http_origin";
#         "~^https?://127.0.0.1(:[0-9]+)?$" "$http_origin";
# 		"~^https?://${LOCAL_IP}(:[0-9]+)?$" "$http_origin";
#     }

#     upstream backend {
#         server backend:3000;
#     }

#     server {
#         listen 443 ssl;
#         server_name ${LOCAL_IP};

# 		ssl_certificate     /etc/nginx/certs/selfsigned.crt;
#     	ssl_certificate_key /etc/nginx/certs/selfsigned.key;

#         add_header Content-Security-Policy "
# 		default-src 'self' https://accounts.google.com;
# 		connect-src 'self' wss://${LOCAL_IP}:8443 https://${LOCAL_IP}:8443;
# 		script-src 'self' 'unsafe-inline' 'unsafe-eval' https://accounts.google.com https://cdn.babylonjs.com;
# 		style-src 'self' 'unsafe-inline' https://fonts.googleapis.com;
# 		font-src 'self' https://fonts.gstatic.com;
# 		img-src 'self' data: https:;
# 		frame-src https://accounts.google.com;" always;


#         # Support des cookies SameSite=None
#         proxy_cookie_path / "/; Secure; SameSite=None";
        
#         # En-têtes de sécurité
#         add_header Access-Control-Allow-Credentials 'true' always;
#         add_header Access-Control-Allow-Origin $cors_origin always;
#         add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS, PUT, DELETE' always;
#         add_header Access-Control-Allow-Headers 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,Cookie' always;
#         add_header Access-Control-Expose-Headers 'Content-Length,Content-Range,Set-Cookie' always;

#         # Gérer les requêtes OPTIONS préliminaires
#         if ($request_method = 'OPTIONS') {
#             return 204;
#         }

#         # Route pour le frontend
#         location / {
#             root   /usr/share/nginx/html;  # Modification du chemin root
#             index  front_greg.html;
#             try_files $uri $uri/ /front_greg.html;

#             # Don't set cache for script files during development 
#             location ~* \.(js|css)$ {
#                 expires -1;
#                 add_header Cache-Control "no-cache, no-store, must-revalidate";
#                 add_header Pragma "no-cache";
#                 add_header Expires 0;
#             }

#             # Ajout des headers pour les fichiers statiques
#             location ~* \.(png|jpg|jpeg|gif|ico)$ {
#                 expires 1d;
#                 add_header Cache-Control "public, no-transform";
#             }
#         }

#         # Route pour l'API et WebSocket
#         location /api/ {
#             proxy_pass http://backend/;
#             proxy_http_version 1.1;
#             proxy_set_header Upgrade $http_upgrade;
#             proxy_set_header Connection "upgrade";
#             proxy_set_header Host $host;
#             proxy_set_header X-Real-IP $remote_addr;
#             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#             proxy_set_header X-Forwarded-Proto $scheme;
            
#             # Conservation des cookies
#             proxy_set_header Cookie $http_cookie;
#             proxy_pass_header Set-Cookie;

#             # Timeouts WebSocket
#             proxy_read_timeout 300s;
#             proxy_send_timeout 300s;
#         }

# 		location /avatar/ {
#     	alias /data/avatar/;
#     	add_header Cache-Control "public, max-age=86400";
# 		}
#     }
# }